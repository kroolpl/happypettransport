---
const currentPath = Astro.url.pathname;
const currentLocale = currentPath.startsWith('/pl') ? 'pl' : 'en';

const languages = [
  { code: 'en', name: 'English', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'pl', name: 'Polski', flag: 'ðŸ‡µðŸ‡±' }
];

function getLocalizedPath(targetLocale: string) {
  // Map of Polish to English paths
  const pathMap = {
    'uslugi': 'services',
    'kontakt': 'contact'
  };

  // Map of English to Polish paths
  const reversePathMap = {
    'services': 'uslugi',
    'contact': 'kontakt'
  };

  if (targetLocale === 'en') {
    // Remove /pl prefix and translate path segments
    let newPath = currentPath.replace(/^\/pl\/?/, '/');
    Object.entries(pathMap).forEach(([pl, en]) => {
      newPath = newPath.replace(`/${pl}`, `/${en}`);
    });
    return newPath || '/';
  } else {
    // Add /pl prefix and translate path segments
    let newPath = currentPath.startsWith('/pl') ? currentPath : `/pl${currentPath}`;
    Object.entries(reversePathMap).forEach(([en, pl]) => {
      newPath = newPath.replace(`/${en}`, `/${pl}`);
    });
    // Handle root path special case
    if (newPath === '/pl/') newPath = '/pl';
    return newPath;
  }
}

// Add a prop to determine if this is mobile version
interface Props {
  isMobile?: boolean;
}

const { isMobile = false } = Astro.props;
---

{isMobile ? (
  <!-- Mobile Language Switcher -->
  <div class="space-y-1">
    {languages.map(({ code, name, flag }) => (
      <a
        href={code === currentLocale ? undefined : getLocalizedPath(code)}
        class={`flex items-center gap-3 px-4 py-3 rounded-lg transition-colors duration-300 ${
          currentLocale === code 
            ? 'bg-accent/10 text-accent font-medium pointer-events-none' 
            : 'text-slate hover:bg-slate/5'
        }`}
        aria-label={`Switch to ${name}`}
        data-language-link
        data-astro-reload
      >
        <span class="text-lg">{flag}</span>
        <span>{name}</span>
        {currentLocale === code && (
          <svg class="w-4 h-4 ml-auto text-accent" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        )}
      </a>
    ))}
  </div>
) : (
  <!-- Desktop Language Switcher -->
  <div class="relative group">
    <button 
      id="languageButton"
      class="flex items-center gap-2 px-4 py-2 rounded-lg bg-slate/5 hover:bg-slate/10 transition-colors duration-300"
      aria-expanded="false"
    >
      <span class="text-lg">{languages.find(l => l.code === currentLocale)?.flag}</span>
      <span class="text-sm font-medium text-slate">{languages.find(l => l.code === currentLocale)?.name}</span>
      <svg 
        class="w-4 h-4 text-slate/70 group-hover:text-accent transition-colors duration-300" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>

    <!-- Dropdown -->
    <div 
      id="languageDropdown"
      class="absolute right-0 mt-2 w-48 py-2 bg-white rounded-lg shadow-lg border border-slate/10 opacity-0 invisible translate-y-2 transition-all duration-300"
    >
      {languages.map(({ code, name, flag }) => (
        <a
          href={code === currentLocale ? undefined : getLocalizedPath(code)}
          class={`flex items-center gap-3 px-4 py-2 hover:bg-slate/5 transition-colors duration-300 ${
            currentLocale === code ? 'text-accent font-medium pointer-events-none' : 'text-slate'
          }`}
          aria-label={`Switch to ${name}`}
          data-language-link
          data-astro-reload
        >
          <span class="text-lg">{flag}</span>
          <span class="text-sm">{name}</span>
          {currentLocale === code && (
            <svg class="w-4 h-4 ml-auto text-accent" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          )}
        </a>
      ))}
    </div>
  </div>
)}

<script>
  function handleLanguageSwitch(event: Event) {
    const link = event.currentTarget as HTMLAnchorElement;
    if (link?.href) {
      event.preventDefault();
      
      // Set a loading state
      document.documentElement.style.opacity = '0.5';
      document.documentElement.style.transition = 'opacity 0.2s';
      
      // Update localStorage before navigation
      const isPolish = link.href.includes('/pl');
      localStorage.setItem('preferredLanguage', isPolish ? 'pl' : 'en');
      
      // Navigate after a brief delay
      setTimeout(() => {
        window.location.href = link.href;
      }, 50);
    }
  }

  function initializeLanguageSwitcher() {
    // Add click handlers to all language links
    document.querySelectorAll('[data-language-link]').forEach(link => {
      // Remove existing listeners first
      link.removeEventListener('click', handleLanguageSwitch);
      // Add new listener
      link.addEventListener('click', handleLanguageSwitch);
    });
  }

  // Initialize on first load
  initializeLanguageSwitcher();

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initializeLanguageSwitcher);
</script> 